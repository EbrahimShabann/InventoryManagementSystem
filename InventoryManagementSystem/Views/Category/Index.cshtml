@using InventoryManagementSystem.Models
@model dynamic
@{
    // Handle both PagedResult<Category> and List<Category> as model
    PagedResult<InventoryManagementSystem.Models.Category> pagedModel;
    if (Model is PagedResult<InventoryManagementSystem.Models.Category> paged)
    {
        pagedModel = paged;
    }
    else if (Model is List<InventoryManagementSystem.Models.Category> list)
    {
        pagedModel = new PagedResult<InventoryManagementSystem.Models.Category> { Items = list, TotalItems = list, TotalItemsCount = list.Count, PageNumber = 1, PageSize = list.Count };
    }
    else
    {
        pagedModel = new PagedResult<InventoryManagementSystem.Models.Category>();
    }
    ViewData["Title"] = "Categories";
}
<div class="col-12 col-md-3 mb-3">
    <input type="text" name="searchText" class="form-control form-control-sm"
           id="searchText" placeholder="Search by name" oninput="search(this)" />
</div>
<partial name="_UpSertModalPartial" />

@if (User.IsInRole(StaticDetails.Admin_Role))
{
    @section asideNav {
        <div class="collapse navbar-collapse  w-auto " id="sidenav-collapse-main">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link UpSert-btn" href="#" data-id="0">
                        <div class="icon icon-shape icon-sm border-radius-md text-center me-2 d-flex align-items-center justify-content-center">
                            <i class="ni ni-key-25 text-dark text-sm opacity-10"></i>
                        </div>
                        <span class="nav-link-text ms-1">Add Category</span>
                    </a>
                </li>
            </ul>
        </div>
    }
}

<div class="row">
    <div class="col-12">
        <div class="card mb-4">
            <div class="card-header pb-0 d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Categories</h5>
            </div>
            <div class="card-body px-0 pt-0 pb-2">
                <div id="injectTable" class="table-responsive p-0">
                    <partial name="sortTable" model="pagedModel" />
                </div>
            </div>
        </div>
    </div>
</div>


<script src="/lib/jquery/dist/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

<script>
    $(document).ready(function() {
        // Initialize delete buttons
        $(document).on('click', '.delete-btn', function() {
            const Id = $(this).data('id');
            Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes, delete it!"
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Category/Delete',
                        type: 'POST',
                        data: { id: Id },
                        success: function(response) {
                            if (response === 'success') {
                                refreshTable();
                                Swal.fire({
                                    title: "Deleted!",
                                    text: "Category has been deleted.",
                                    icon: "success"
                                });
                            }
                            else if (response === 'has_products') {
                                Swal.fire({
                                    title: "Cannot Delete!",
                                    text: "This category has associated products and cannot be deleted.",
                                    icon: "warning"
                                });
                            }
                            else {
                                Swal.fire({
                                    title: "Error!",
                                    text: "Could not delete category.",
                                    icon: "error"
                                });
                            }
                        },
                        error: function(xhr) {
                            Swal.fire({
                                title: "Error!",
                                text: "Server responded with: " + xhr.statusText,
                                icon: "error"
                            });
                        }
                    });
                }
            });
        });

        // Initialize edit buttons
        $(document).on('click', '.UpSert-btn', function() {
            const id = $(this).data('id');
            loadCategoryForm(id);
        });

        // Initialize sorting
        $(document).on('click', '.sort', function(e) {
            e.preventDefault();
            const sortOrder = $(this).data('sortorder');
            $.ajax({
                url: `/Category/SortTable?sortOrder=${sortOrder}`,
                success: function(result) {
                    $("#injectTable").html(result);
                },
                error: function(xhr) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Sorting Failed',
                        text: 'Server responded with: ' + xhr.statusText
                    });
                }
            });
        });

        // Function to load category form
        function loadCategoryForm(id) {
            $("#modalBody").load(`/Category/UpSert?id=${id}`, function(response, status, xhr) {
                if (status == "error") {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error Loading Form',
                        text: 'Failed to load category form',
                        footer: 'Status: ' + xhr.statusText
                    });
                } else {
                    var modal = new bootstrap.Modal('#upsertModal');
                    modal.show();

                    // Re-attach validation after modal is shown
                    $('#upsertModal').on('shown.bs.modal', function() {
                        $.validator.unobtrusive.parse('#categoryForm');
                    });
                }
            });
        }

        // Function to refresh table
        function refreshTable() {
            $.get('/Category/Index', function(data) {
                var html = $(data).find('#injectTable').html();
                $('#injectTable').html(html);
            }).fail(function(xhr) {
                Swal.fire({
                    icon: 'error',
                    title: 'Refresh Failed',
                    text: 'Failed to refresh category list',
                    footer: 'Status: ' + xhr.statusText
                });
            });
        }
    });

    // Search function
    function search(input) {
        var searchtext = $(input).val();
        $.ajax({
            url: `/Category/Search?searchText=${searchtext}`,
            success: function(result) {
                $("#injectTable").html(result);
            },
            error: function(xhr) {
                Swal.fire({
                    icon: 'error',
                    title: 'Search Failed',
                    text: 'Server responded with: ' + xhr.statusText
                });
            }
        });
    }
</script>

<partial name="_PaginationControls" model="pagedModel" />